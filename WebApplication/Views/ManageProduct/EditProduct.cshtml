@model WebApplication.Models.ProductModel

@{
    ViewBag.Title = "Edit Product";
    Layout = "~/Views/Shared/LayoutAdmin.cshtml";
}

<h2>Edit Product</h2>

@using (Html.BeginForm("EditProductAction", "ManageProduct", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.HiddenFor(model => model.ProductNumber)
    @Html.HiddenFor(model => model.ImagePath) <!-- Hidden field for current image -->

    <div class="form-group">
        @Html.LabelFor(model => model.ProductName)
        @Html.TextBoxFor(model => model.ProductName, new { @class = "form-control", aria_label = "Product Name" })
        @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        <label for="categoryByAge">Age Category</label>
        @Html.DropDownListFor(model => model.CategoryByAge, new SelectList(new[] {
            new { Value = "0-3", Text = "0-3" },
            new { Value = "3-10", Text = "3-10" },
            new { Value = "10-16", Text = "10-16" },
            new { Value = "16-21", Text = "16-21" }
        }, "Value", "Text"), new { @class = "form-control", id = "categoryByAge", required = "required" })
        @Html.ValidationMessageFor(model => model.CategoryByAge, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        <label for="category">Category</label>
        @Html.DropDownListFor(model => model.Category, new SelectList(new[] {
            new { Value = "Toy Sets", Text = "Toy Sets" },
            new { Value = "Plush Toy", Text = "Plush Toy" },
            new { Value = "Lego Bricks", Text = "Lego Bricks" },
            new { Value = "Remote Control", Text = "Remote Control" }
        }, "Value", "Text"), new { @class = "form-control", id = "category", required = "required" })
        @Html.ValidationMessageFor(model => model.Category, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        <label for="sellCategory">Sell Category</label>
        @Html.DropDownListFor(model => model.SellCategory, new SelectList(new[] {
            new { Value = "On Sales", Text = "On Sales" },
            new { Value = "Top Sales", Text = "Top Sales" },
            new { Value = "Boys", Text = "Boys" },
            new { Value = "Girls", Text = "Girls" }
        }, "Value", "Text"), new { @class = "form-control", id = "sellCategory", required = "required" })
        @Html.ValidationMessageFor(model => model.SellCategory, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Price)
        @Html.TextBoxFor(model => model.Price, new { @class = "form-control", aria_label = "Price" })
        @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Quantity)
        @Html.TextBoxFor(model => model.Quantity, new { @class = "form-control", aria_label = "Quantity" })
        @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ProductDetail)
        @Html.TextAreaFor(model => model.ProductDetail, new { @class = "form-control", rows = 4, aria_label = "Description" })
        @Html.ValidationMessageFor(model => model.ProductDetail, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        <label>Product Image</label>
        <div class="form-check">
            <input class="form-check-input" type="radio" name="ImageOption" id="currentImage" value="current" checked aria-label="Keep current image" />
            <label class="form-check-label" for="currentImage">Keep current image</label>
        </div>
        @if (!string.IsNullOrEmpty(Model.ImagePath))
        {
            <div id="currentImageContainer" class="mb-3">
                <img src="@Url.Content(Model.ImagePath)" alt="Product Image" style="max-width: 200px; height: auto;" />
            </div>
        }

        <div class="form-check">
            <input class="form-check-input" type="radio" name="ImageOption" id="newImage" value="new" aria-label="Upload new image" />
            <label class="form-check-label" for="newImage">Upload new image</label>
        </div>
        <div id="newImageContainer" class="form-group d-none">
            <input type="file" id="ProductImage" name="ProductImage" class="form-control-file" aria-label="New Product Image" />
            @Html.ValidationMessage("ProductImage", "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.IsActive)
        @Html.CheckBoxFor(model => model.IsActive, new { aria_label = "Is Active" })
    </div>

    <button type="submit" class="btn btn-primary">Save changes</button>
    @Html.ActionLink("Cancel", "ManageProduct", null, new { @class = "btn btn-secondary ml-2" })

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
}

@if (ViewBag.Errors != null)
{
    <div class="alert alert-danger">
        <ul>
            @foreach (var error in ViewBag.Errors)
            {
                <li>@error.ErrorMessage</li>
            }
        </ul>
    </div>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var currentImageRadio = document.getElementById('currentImage');
            var newImageRadio = document.getElementById('newImage');
            var newImageContainer = document.getElementById('newImageContainer');

            currentImageRadio.addEventListener('change', function () {
                if (currentImageRadio.checked) {
                    newImageContainer.classList.add('d-none');
                }
            });

            newImageRadio.addEventListener('change', function () {
                if (newImageRadio.checked) {
                    newImageContainer.classList.remove('d-none');
                }
            });
        });
    </script>
}
